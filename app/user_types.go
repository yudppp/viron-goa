// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "viron": Application User Types
//
// Command:
// $ goagen
// --design=github.com/yudppp/viron-goa/design
// --out=$(GOPATH)/src/github.com/yudppp/viron-goa
// --version=v1.3.1

package app

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// signinPayload user type.
type signinPayload struct {
	// ID or Email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the signinPayload type instance.
func (ut *signinPayload) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 256, false))
		}
	}
	return
}

// Publicize creates SigninPayload from signinPayload
func (ut *signinPayload) Publicize() *SigninPayload {
	var pub SigninPayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// SigninPayload user type.
type SigninPayload struct {
	// ID or Email
	Email string `form:"email" json:"email" xml:"email"`
	// Password
	Password string `form:"password" json:"password" xml:"password"`
}

// Validate validates the SigninPayload type instance.
func (ut *SigninPayload) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if utf8.RuneCountInString(ut.Password) > 256 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 256, false))
	}
	return
}
