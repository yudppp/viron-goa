// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "viron": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/yudppp/viron-goa/design
// --out=$(GOPATH)/src/github.com/yudppp/viron-goa
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// AuthtypeVironContext provides the viron authtype action context.
type AuthtypeVironContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewAuthtypeVironContext parses the incoming request URL and body, performs validations and creates the
// context used by the viron controller authtype action.
func NewAuthtypeVironContext(ctx context.Context, r *http.Request, service *goa.Service) (*AuthtypeVironContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AuthtypeVironContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AuthtypeVironContext) OK(r VironauthtypeCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.vironauthtype+json; type=collection")
	}
	if r == nil {
		r = VironauthtypeCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GetVironContext provides the viron get action context.
type GetVironContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetVironContext parses the incoming request URL and body, performs validations and creates the
// context used by the viron controller get action.
func NewGetVironContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetVironContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetVironContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetVironContext) OK(r *Vironsetting) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.vironsetting+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// SigninVironContext provides the viron signin action context.
type SigninVironContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SigninPayload
}

// NewSigninVironContext parses the incoming request URL and body, performs validations and creates the
// context used by the viron controller signin action.
func NewSigninVironContext(ctx context.Context, r *http.Request, service *goa.Service) (*SigninVironContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SigninVironContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SigninVironContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SigninVironContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SigninVironContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}
